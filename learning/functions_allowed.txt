write
signal
	the behavior of signal() varies across UNIX versions, and has
		also varied historically across different versions of Linux.
		Avoid its use: use sigaction(2) instead.
sigemptyset
sigaddset
sigaction
	int sigaction(int signum, const struct sigaction *restrict act,
                     struct sigaction *restrict oldact);
	The sigaction() system call is used to change the action taken by
		a process on receipt of a specific signal.
	-	signum specifies the signal and can be any valid signal except
      	SIGKILL and SIGSTOP.
	-	If act is non-NULL, the new action for signal signum is installed
		from act.  If oldact is non-NULL, the previous action is saved in
		oldact.
	-	The sigaction structure is defined as something like:
           struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };
		   On some architectures a union is involved: do not assign to both
      		sa_handler and sa_sigaction.
kill
	int kill(pid_t pid, int sig);
	The kill() system call can be used to send any signal to any
       process group or process.
	If pid is positive, then signal sig is sent to the process with
       the ID specified by pid.
	If pid equals 0, then sig is sent to every process in the process
       group of the calling process.
	If pid equals -1, then sig is sent to every process for which the
       calling process has permission to send signals, except for
       process 1 (init), but see below.
	If pid is less than -1, then sig is sent to every process in the
       process group whose ID is -pid.
	If sig is 0, then no signal is sent, but existence and permission
       checks are still performed; this can be used to check for the
       existence of a process ID or process group ID that the caller is
       permitted to signal.
	For a process to have permission to send a signal, it must either
       be privileged (under Linux: have the CAP_KILL capability in the
       user namespace of the target process), or the real or effective
       user ID of the sending process must equal the real or saved set-
       user-ID of the target process.  In the case of SIGCONT, it
       suffices when the sending and receiving processes belong to the
       same session.  (Historically, the rules were different; see
       NOTES.)
getpid
	pid_t getpid(void);
	getpid() returns the process ID (PID) of the calling process.
       (This is often used by routines that generate unique temporary
       filenames.)
malloc
free
pause
	pause() causes the calling process (or thread) to sleep until a signal
	is delivered that either terminates the process or causes the invocation
	of a signal-catching function.
sleep
usleep
exit